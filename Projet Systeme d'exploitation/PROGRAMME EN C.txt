#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
volatile sig_atomic_t infini1=0;
volatile sig_atomic_t infini2=0;
volatile sig_atomic_t infini3=0;
int i,compteur;
pid_t pid1, pid2,proc1id,proc2id;

void waitHandler(int signum){

    kill(getppid(), SIGCONT);
}

void killPrecessus(int signum){
    i=0;
    i++;
    signal(SIGALRM,waitHandler);
    if(i%2==1){if(proc1id!=0){printf("processus1_pid=%d : mesure 2\n",proc1id);}
    alarm(120);}//2eme arret 2min=120 secondes
    else alarm(0);}


void Hand_P (int sig) {
compteur++;
if (compteur % 2 == 1) kill(pid2, SIGUSR2);
else kill(pid1, SIGUSR1);
}

void Hand_F1 (int sig) {
    
proc1id=getpid();
printf("processus1_pid=%d : mesure 1\n",proc1id);
 signal(SIGALRM,killPrecessus);
 alarm(60);
//1er arret 1min=60secondes;
}

void Hand_F2 (int sig) {

proc2id=getpid();
printf("processus2_pid=%d : mesure\n",proc2id);
signal(SIGALRM,killPrecessus);
alarm(60);//3eme arrer 1min=60secondes

}

void  INThandler(int signum)
{
     if (signum == SIGINT) { 
        if (infini3){      
            if(infini2){
                  infini1 =1;}
            infini2 = 1;}        
        infini3 = 1;
    }
}

int main() {
compteur = 0;
signal (SIGCONT, Hand_P);
signal (SIGUSR1, Hand_F1);
signal (SIGUSR2, Hand_F2);
signal(SIGINT, INThandler);

pid1 = fork();
if(pid1 == 0) {
while(!infini3);
sleep(1);}
pid2 = fork();
if(pid2 == 0) {
while(!infini2);
sleep(1);}

if(infini2 != 1,infini3 != 1){kill(pid1, SIGUSR1);}
while(!infini1);
sleep(1);
exit(0);
}